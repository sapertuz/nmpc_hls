#include <fstream>
#include <string.h>
#include <string>
#include <math.h>
#include <iostream>
#include <iomanip>

// #ifdef __SYNTHESIS__
// #include "hls_math.h"
// typedef half _real;
// #else
// typedef float _real;
// #endif

#include "aux_functions.hpp"
#include "hls_system.hpp"
#include "config.hpp"

typedef _hw_top_real _system_real;


#ifdef INVERTED_PENDULUM_CONFIG
float initial_state[] = {0.0, 0.0, 3.1415926536, 0.0};
// float x_ss[] = {0.4, 0.3, 0.2, 0.1};
float u_guess[] = {39, 50};
float x_ref[] = {  
    0.0, 0.0, 2.0, 0.0,
    0.0, 0.0, 3.0, 0.0,
    0.0, 0.0, 3.1415926536, 0.0
};

#elif defined SNIFFBOT_CONFIG
float initial_state[] =  {7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
float u_guess[] = {
    -5.456205e+00, -1.350515e+01, 4.479129e+00, 1.336604e+01,
	1.716748e+00, -1.263409e+01, 2.014250e+01, 3.336180e+01,
	1.695226e-01, -1.198426e+01, 1.983357e+01, 3.170065e+01,
	-2.168870e-01, 8.560979e-01, 1.924747e+01, 5.170065e+01,
	-7.035229e-01, 9.593711e-01, 1.889217e+01, 5.438382e+01,
	-4.991244e-01, 3.375533e+00, 1.730480e+01, 5.368795e+01,
	-9.456992e-01, 2.815948e+00, 1.634194e+01, 5.203432e+01,
	3.446651e-01, 3.075991e+00, 1.675750e+01, 5.268433e+01,
	-1.577545e+00, 6.507474e+00, 1.365201e+01, 5.301182e+01,
	-2.050410e-01, 5.407351e+00, 1.108663e+01, 4.555124e+01,
	1.623561e+00, 4.648031e+00, 7.475579e+00, 4.878659e+01,
	1.346939e+00, 3.996172e+00, -4.739766e-01, 4.705463e+01,
	3.156461e+00, 5.385727e+00, -7.830481e+00, 4.630649e+01,
	5.144189e-01, 5.311757e+00, -9.258071e+00, 4.305677e+01,
	6.824884e-01, 4.030057e+00, -1.086346e+01, 3.785103e+01,
	1.894311e+00, 3.812737e+00, -1.326436e+01, 3.765707e+01,
	2.594961e+00, 3.463288e+00, -1.287875e+01, 3.617955e+01,
	1.023345e+00, 1.429346e+00, -1.839980e+01, 3.722377e+01,
	2.440676e+00, 1.904959e+00, -3.089306e+01, 3.388112e+01,
	1.579766e+00, 5.393332e-01, -2.295637e+01, 3.109049e+01,
	1.430177e+00, 3.020357e-01, -2.006380e+01, 2.889075e+01,
	1.345872e+00, -3.122466e-01, -2.173977e+01, 2.856935e+01,
	1.436157e+00, -3.193809e+00, -2.074453e+01, 2.811672e+01,
	1.825095e+00, -2.199590e+00, -1.882938e+01, 2.656818e+01,
	4.031677e-01, -4.343314e+00, -1.034118e+01, 2.119968e+01,
	8.365455e-01, -4.958055e+00, -1.096657e+01, 1.710229e+01,
	1.720540e+00, -4.709889e+00, -9.579023e+00, 1.652339e+01,
	7.325081e-01, -6.074440e+00, -8.704010e+00, 1.323869e+01,
	1.024418e+00, -8.628096e+00, -8.720356e+00, 1.961181e+00,
	-5.122181e-01, -7.807771e+00, -6.797853e+00, 2.698162e+00,
	-4.776153e-01, -8.431214e+00, -5.981246e+00, 3.500423e+00,
	-6.554902e-01, -7.676350e+00, -3.808935e+00, 4.940717e+00,
	-4.876727e-01, -1.151708e+01, -8.559741e-01, 1.654600e+00,
	3.899617e-01, -1.101880e+01, -1.836540e+00, 1.917969e+00,
	9.108279e-01, -1.226165e+01, 1.133404e-01, 2.132009e+00,
	1.037937e-01, -1.095421e+01, -4.056198e-01, 1.540905e+00,
	6.817764e-01, -8.915069e+00, 5.903495e-01, 9.990785e-02,
	1.143085e+00, -8.645865e+00, 8.673664e-01, -4.783818e-01,
	5.993894e-01, -9.303676e+00, 2.804208e+00, -5.059100e-01,
	6.806533e-01, -8.235226e+00, 1.602070e+00, -2.050591e+01,
	9.801486e-01, -6.992032e+00, 2.343080e+00, -2.441690e+01,
	9.704918e-01, -4.349310e+00, 3.705272e+00, -2.435760e+01,
	1.162869e+00, -3.821450e+00, 5.548545e+00, -2.410425e+01,
	4.498856e-01, -3.160060e+00, 8.399385e+00, -2.550788e+01,
	4.529724e-01, -5.375471e+00, 1.000548e+01, -2.906292e+01,
	-5.931960e-01, -2.820191e+00, 6.688936e+00, -2.279482e+01,
	1.210281e-01, -6.728818e-02, 7.659434e+00, -2.094363e+01,
	-7.220900e-02, 4.038938e+00, 7.834330e+00, -2.039479e+01,
	6.322491e-01, 6.956000e+00, 7.850657e+00, -2.360674e+01,
	2.289801e-01, 3.431268e+00, 7.381041e+00, -2.472556e+01,
	9.252375e-01, 9.364739e+00, 7.488407e+00, -2.516054e+01,
	1.215495e+00, 9.819304e+00, 7.484676e+00, -2.518276e+01,
	5.935134e-01, 9.847412e+00, 1.038593e+01, -1.934267e+01,
	6.434901e-01, 1.089115e+01, 1.191224e+01, -1.966534e+01,
	1.085227e+00, 8.993521e+00, 1.119531e+01, -1.965469e+01,
	6.324500e-01, 9.843384e+00, 1.155294e+01, -1.988154e+01,
	1.076337e+00, 1.018191e+01, 1.072507e+01, -2.159701e+01,
	7.565302e-01, 1.078964e+01, 9.616903e+00, -2.088681e+01,
	-7.381395e-02, 9.111423e+00, 9.718822e+00, -2.338220e+01,
	3.846920e-01, 8.855644e+00, 7.620144e+00, -1.237963e+01
};
float x_ref[] = {  
    7.078500e+00, 1.000100e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.141600e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.078500e+00, 1.000100e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.141600e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.157000e+00, 1.000500e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.283200e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.157000e+00, 1.000500e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.283200e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.235300e+00, 1.001100e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 9.424800e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.235300e+00, 1.001100e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 9.424800e-02, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.313300e+00, 1.002000e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.256600e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.313300e+00, 1.002000e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.256600e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.391100e+00, 1.003100e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.570800e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.391100e+00, 1.003100e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.570800e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.468500e+00, 1.004400e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.885000e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.468500e+00, 1.004400e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.885000e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.545400e+00, 1.006000e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 2.199100e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.545400e+00, 1.006000e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 2.199100e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.621700e+00, 1.007900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 2.513300e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.621700e+00, 1.007900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 2.513300e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.697500e+00, 1.009900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 2.827400e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.697500e+00, 1.009900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 2.827400e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.772500e+00, 1.012200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.141600e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.772500e+00, 1.012200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.141600e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.846800e+00, 1.014800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.455800e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.846800e+00, 1.014800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.455800e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.920300e+00, 1.017600e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.769900e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.920300e+00, 1.017600e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.769900e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.920300e+00, 1.017600e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 3.769900e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.992900e+00, 1.020600e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.084100e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	7.992900e+00, 1.020600e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.084100e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.064400e+00, 1.023800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.398200e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.064400e+00, 1.023800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.398200e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.135000e+00, 1.027200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.712400e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.135000e+00, 1.027200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 4.712400e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.204400e+00, 1.030900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.026500e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.204400e+00, 1.030900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.026500e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.272600e+00, 1.034800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.340700e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.272600e+00, 1.034800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.340700e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.339600e+00, 1.038900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.654900e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.339600e+00, 1.038900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.654900e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.405200e+00, 1.043200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.969000e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.405200e+00, 1.043200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 5.969000e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.469500e+00, 1.047700e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.283200e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.469500e+00, 1.047700e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.283200e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.532300e+00, 1.052500e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.597300e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.532300e+00, 1.052500e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.597300e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.593600e+00, 1.057400e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.911500e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.593600e+00, 1.057400e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 6.911500e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.653300e+00, 1.062500e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.225700e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.653300e+00, 1.062500e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.225700e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.711400e+00, 1.067800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.539800e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.711400e+00, 1.067800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.539800e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.767800e+00, 1.073200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.854000e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.767800e+00, 1.073200e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.854000e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.822400e+00, 1.078900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 8.168100e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.822400e+00, 1.078900e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 8.168100e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.875300e+00, 1.084700e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 8.482300e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.875300e+00, 1.084700e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 8.482300e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.926300e+00, 1.090600e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 8.796500e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.926300e+00, 1.090600e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 8.796500e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.975400e+00, 1.096800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 9.110600e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	8.975400e+00, 1.096800e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 9.110600e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00,
	9.022500e+00, 1.103100e+01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 9.424800e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00
};

#endif

top_model_t my_model;
top_model_t *my_model_ptr = &my_model;

float cost_function_wrapper(
    volatile float *control_guess,
	volatile float *xref,
	volatile float *current_state
)
{
#pragma HLS INTERFACE s_axilite port=return         bundle=control

#pragma HLS INTERFACE s_axilite port=control_guess  bundle=control
#pragma HLS INTERFACE s_axilite port=xref           bundle=control
#pragma HLS INTERFACE s_axilite port=current_state  bundle=control

#pragma HLS INTERFACE m_axi depth=40  port=control_guess offset=slave bundle=input
#pragma HLS INTERFACE m_axi depth=120 port=xref          offset=slave bundle=input
#pragma HLS INTERFACE m_axi depth=12  port=current_state offset=slave bundle=input


    typedef System<_system_real, top_model_t, _Nh, _Nx, _n_U, _Nu> T_system;
    T_system current_system(
        _u_max, 
        _u_min, 
        _du_max,
        _controlled_state,
        _state_upper_limits, 
        _state_lower_limits, 
        _Q, 
        _Qf, 
        _R, 
        _uss,
        _Ts
        ,
        my_model_ptr
        );

    _system_real local_control_guess[_n_U*_Nu];
    _system_real local_xref[_Nx*_Nh];
    _system_real local_current_state[_Nx];

#pragma HLS bind_storage variable=local_control_guess type=FIFO impl=LUTRAM
#pragma HLS bind_storage variable=local_xref type=FIFO impl=LUTRAM
#pragma HLS bind_storage variable=local_current_state type=FIFO impl=LUTRAM

    reg_curr_st: memcpy_loop_rolled<_system_real, float, _Nx>(local_current_state, (float *)current_state);
    reg_cont_gss: memcpy_loop_rolled<_system_real, float, _n_U*_Nu>(local_control_guess, (float *)control_guess);
    reg_xref: memcpy_loop_rolled<_system_real, float, _Nx*_Nh>(local_xref, (float *) xref);

    _system_real cf;
    current_system.nmpc_cost_function(local_current_state, local_control_guess, local_xref, &cf);
    // current_system.nmpc_cost_function_topflow(local_current_state, local_control_guess, local_xref, &cf);
    return (float) cf;
}

int main(){
    
    float j = cost_function_wrapper((volatile float *)u_guess, (volatile float *)x_ref, (volatile float *)initial_state);
    std::cout << "J = " << j << std::endl;
    return 0;
}
